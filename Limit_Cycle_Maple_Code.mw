   
#################################################################################################################

Algorithm 1 NormalForm

------------------------------------------------------------------------------------------
INPUT: A perturbed differential system [\dot{x}=P+p, \dot{y}=Q+q] and an averaging order k
------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
OUTPUT: An expression of dr/dtheta up to k-th order in epsilon
------------------------------------------------------------------------------------------

NormalForm := proc (P, Q, p, q, k) 
local d1, d2, T, H, c, F, i; 
d1 := normal(subs(x = r*C, y = r*S, (x*(P+p)+y*(Q+q))/r)); 
d2 := normal(subs(x = r*C, y = r*S, (x*(Q+q)-y*(P+p))/r^2)); 
T := taylor(d1/d2, epsilon = 0, k+1); 
H := convert(T, polynom); 
F[0] := coeff(epsilon*H, epsilon); 
for i to k do c[i] := simplify(coeff(H, epsilon^i)); 
F[i, 1] := prem(numer(c[i]), C^2+S^2-1, S); 
F[i, 2] := prem(denom(c[i]), C^2+S^2-1, S); 
F[i] := normal(F[i, 1]/F[i, 2]) end do; 
return collect(simplify(subs(C = cos(theta), S = sin(theta), F[0]+sum(F[j]*epsilon^j, j = 1 .. k)),
{sin(theta)^2+cos(theta)^2-1}, [sin(theta)]), epsilon) end proc:


#################################################################################################################

Algorithm 2 DSolutions

---------------------------------------------------------------------------------
INPUT: The unperturbed term F0 in the normal form dr/dtheta
---------------------------------------------------------------------------------

---------------------------------------------------------------------------------
OUTPUT: The 2\pi-periodic solutions r(theta,z), a set of inequalities w.r.t z,
        and the fundamental solution Y(theta,z)
---------------------------------------------------------------------------------

DSolutions := proc (F0) 
local de1, ans1, min_value, m, SIs, i, de2, Yz; 
de1 := diff(r(theta), theta) = subs(r = r(theta), F0); 
ans1 := simplify(dsolve({r(0) = z, de1}, r(theta)), 'symbolic', assume = real); 
min_value := minimize(op(2, ans1), theta = 0 .. 2*Pi); 
m := nops([op(min_value)]); 
SIs := {}; 
for i to m do 
SIs := `union`(SIs, {0 < op(i, min_value)}); 
end do; 
de2 := diff(Y(theta), theta) = subs(r = op(2, ans1), diff(F0, r))*Y(theta); 
Yz := op(2, dsolve({Y(0) = 1, de2}, Y(theta))); 
return RealDomain:-simplify([op(2, ans1), SIs, Yz], 
{RealDomain:-`^`(RealDomain:-sin(theta), 2)+RealDomain:-`^`(RealDomain:-cos(theta), 2)-1}, 
[RealDomain:-sin(theta)]) end proc:

#################################################################################################################

Algorithm 3 AveragingFormula

---------------------------------------------------------------------------------
INPUT: An averaging order k of the normal form dr/dtheta
---------------------------------------------------------------------------------

---------------------------------------------------------------------------------
OUTPUT: The integral function y_k(theta,z)
---------------------------------------------------------------------------------

AveragingFormula := proc (k) 
local l, m, S, T; 
T := 0; S := 0; 
for m from 2 to k do 
T := T+(Diff(F[0](s, r(s, z)), `$`(r, m)))*IncompleteBellB(k, m, seq(y[i](s, z), i = 1 .. k-m+1)); 
end do; 
for l to k-1 do 
for m to l do 
S := S+factorial(k)*(Diff(F[k-l](s, r(s, z)), `$`(r, m)))*IncompleteBellB(l, m, seq(y[i](s, z), i = 1 .. l-m+1))/factorial(l); 
end do;
end do; 
return Y(theta, z)*(Int((factorial(k)*F[k](s, r(s, z))+T+S)/Y(s, z), s = 0 .. theta)) end proc:


##################################################################################################################

Algorithm 4 AveragedFunction

---------------------------------------------------------------------------------
INPUT: A normal form of averaging dr/dtheta with an order k, 
       the fundamental solutions r(theta,z), Y(theta,z)
---------------------------------------------------------------------------------

---------------------------------------------------------------------------------
OUTPUT: A list of expressions of the averaged functions
---------------------------------------------------------------------------------


AveragedFunction := proc (dR, rZ, Yz, k) 
local AFormula, j, F, y, A, H, h, g, s, f; 

AFormula := proc (k) 
local l, m, U, V; 
U := 0; 
V := 0; 
for m from 2 to k do 
U := U+(Diff(F[0], `$`(r, m)))*IncompleteBellB(k, m, seq(y[i], i = 1 .. k-m+1)); 
end do; 
for l to k-1 do 
for m to l do 
V := V+factorial(k)*(Diff(F[k-l], `$`(r, m)))*IncompleteBellB(l, m, seq(y[i], i = 1 .. l-m+1))/factorial(l); 
end do; 
end do; 
return expand(factorial(k)*F[k]+U+V) end proc: 

F[0] := factor(coeff(dR*epsilon, epsilon)); 
for j to k do 
F[j] := factor(coeff(dR, epsilon^j)); 
A[j] := AFormula(j); 
H[j] := simplify(expand(subs(r = rZ, value(A[j])))/Yz, assume = real); 
H[j, 1] := collect(expand(numer(H[j])), {cos(theta), sin(theta)}, 'distributed'); 
H[j, 2] := denom(H[j]);
for h to nops(H[j, 1]) do 
g[j, h] := simplify(int(op(h, H[j, 1])/H[j, 2], theta = 0 .. theta, 'AllSolutions')); 
s[j, h] := simplify(int(op(h, H[j, 1])/H[j, 2], theta = 0 .. 2*Pi)); 
end do; 
y[j] := Yz*simplify(sum(g[j, t], t = 1 .. nops(H[j, 1]))); 
f[j] := simplify((sum(s[j, t], t = 1 .. nops(H[j, 1])))/factorial(j)); 
end do; return [y[k], f[k]] end proc:

####################################################################################################################




